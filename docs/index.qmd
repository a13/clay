
---
format:
  html: {toc: true, toc-depth: 4, theme: spacelab, output-file: index.html}
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}
title: Clay documentation

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="index_files/md-default2.js" type="text/javascript"></script><script src="index_files/md-default3.js" type="text/javascript"></script><script src="index_files/reagent4.js" type="text/javascript"></script><script src="index_files/reagent5.js" type="text/javascript"></script><script src="index_files/reagent6.js" type="text/javascript"></script><script src="index_files/reagent7.js" type="text/javascript"></script><script src="index_files/reagent8.js" type="text/javascript"></script><script src="index_files/reagent9.js" type="text/javascript"></script><script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js" type="text/javascript"></script><script src="index_files/vega10.js" type="text/javascript"></script><script src="index_files/vega11.js" type="text/javascript"></script><script src="index_files/vega12.js" type="text/javascript"></script><script src="index_files/cytoscape13.js" type="text/javascript"></script><script src="index_files/echarts14.js" type="text/javascript"></script><script src="index_files/plotly15.js" type="text/javascript"></script><script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" type="text/javascript"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/3Dmol/1.5.3/3Dmol.min.js" type="text/javascript"></script><script src="index_files/portal16.js" type="text/javascript"></script><link href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" /><link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet" type="text/css" />
<div style="max-height:600px;overflow-y:auto;"><img alt="Clay logo" src="https://raw.githubusercontent.com/scicloj/clay/main/resources/Clay.svg.png" style="width:100px;" /></div>

[Clay](https://github.com/scicloj/clay) is a minimalistic Clojure tool for data visualization and literate programming, compatible with the [Kindly](https://scicloj.github.io/kindly/) convention.


## Status
This project will soon exit alpha-stage and have a stable release.

Clay is developed by [Timothy Pratley](https://github.com/timothypratley/) & [Daniel Slutsky](https://github.com/daslu) in parallel and in coordination with [Claykind](https://github.com/timothypratley/claykind), a tool with similar goals which is build in a more thoughtful process, aiming at a more modular structure.

## Goals
- Easily explore & share data visualizations and notebooks for others to easily pick & use.
- Encourage writing Kindly-compatible notes for future compatiblity with other tools.
- Flow with the REPL: encourage user interactions that flow naturally with the typical use of Clojure in editors and REPLs.

## Videos

<div style="max-height:600px;overflow-y:auto;"><table><tr><td>June 10th 2023</td><td>An early overview - babashka-conf</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/HvhMsv3iVGM"></iframe></td></tr><tr><td>Dec. 1st 2023</td><td>Kindly & Clay overview - visual-tools group - see Daniel's & Tim's parts</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/DAQnvAgBma8"></iframe></td></tr><tr><td>Dec. 12th 2023</td><td>Demo & Clay overview - London Clojurians - see Tim's part</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/skMMvxWjmNM"></iframe></td></tr><tr><td>Dec. 16th 2023</td><td>Calva integration - datavis demo</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/X_SsjhmG5Ok"></iframe></td></tr><tr><td>Dec. 17th 2023</td><td>CIDER integration - image processing demo</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/fd4kjlws6Ts"></iframe></td></tr><tr><td>Dec. 17th 2023</td><td>Cursive integration, API, configuration - blogging demo</td><td><iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/GsML75MtNXw"></iframe></td></tr></table></div>


## Setup
See [the example project](https://github.com/scicloj/clay/tree/main/examples/example-project) for a concrete example.
To enjoy Clay's dynamic interaction, you also need to inform it about code evaluations. This requires some setup at the your editor.

To use [Quarto](https://quarto.org/)-related actions, it is necessary to have the Quarto CLI [installed](https://quarto.org/docs/get-started/) in your system.

See the suggested setup for popular editors below. If your favourite editor is not supported yet, let us talk and make it work.

### VSCode Calva
If you now run a REPL with Clay version in  your classpath, then Calva will have the relevant [custom REPL commands](https://calva.io/custom-commands/), as defined [here](https://github.com/scicloj/clay/blob/main/resources/calva.exports/config.edn).

|name|function|
|--|--|
|`Clay make Namespace as HTML`|will genenrate an HTML rendering of the current namespace.
|`Clay make Namespace as Quarto, then HTML`|will generate a Quarto `.qmd` rendering of the current namespace, then render it as HTML through Quarto.|
|`Clay make Namespace as Quarto, then reveal.js`|will generate a Quarto `.qmd` rendering of the current namespace, then render it as a reveal.js slideshow through Quarto.|
|`Clay make current form as HTML`|will generate an HTML rendering of the current form, in the context of the current namespace.|

### Emacs CIDER

See the [clay.el](https://github.com/scicloj/clay.el) package for the relevant interactive functions.

### IntelliJ Cursive

Under preferences, search for "REPL Commands"
(or use the menu IntelliJ -> Preferences -> Languages and Frameworks -> Clojure -> REPL Commands)

Add a global command, and edit it with these settings:

**Name:** Send form to Clay\
**Execution:** Command

```clojure
(do (require '[scicloj.clay.v2.api :as clay])
(clay/make! {:single-form '~form-before-caret
:source-path ["~file-path"]}))
```

You might also like to create a command to compile the namespace:

```clojure
(do (require '[scicloj.clay.v2.api :as clay])
(clay/make! {:source-path ["~file-path"]}))
```

Or a `top-level-form` (replace `form-before-caret` with `top-level-form`).

You can then add keybindings under Preferences -> Keymap for the new commands.

For more information about commands, see the Cursive documentation on [REPL commands and substitutions](https://cursive-ide.com/userguide/repl.html#repl-commands).

## Starting a Clay namespace
Now, we can write a namespace and play with Clay.


::: {.sourceClojure}
```clojure
(ns index
  (:require [scicloj.kindly.v4.kind :as kind]
            [scicloj.kindly.v4.api :as kindly]
            [tablecloth.api :as tc]))
```
:::



## API


::: {.sourceClojure}
```clojure
(require '[scicloj.clay.v2.api :as clay])
```
:::


The entry point of the Clay API  is the `scicloj.clay.v2.api/make!` function.
Here are some usage examples.
Evaluate and render
the namespace in `"notebooks/index.clj"`
as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:html]
               :source-path "notebooks/index.clj"}))
```
:::


Do the same as above
(since `:format [:html]` is the default):


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:source-path "notebooks/index.clj"}))
```
:::


Evaluate and render
the namespace in `"notebooks/index.clj"`
as HTML
and do not show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:source-path "notebooks/index.clj"
               :show false}))
```
:::


Evaluate and render
the namespaces in `"notebooks/slides.clj"` `"notebooks/index.clj"`
as HTML
and do not show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:source-path ["notebooks/slides.clj"
                             "notebooks/index.clj"]
               :show false}))
```
:::


Evaluate and render a single form
in the context of the namespace in `"notebooks/index.clj"`
as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:source-path "notebooks/index.clj"
               :single-form '(kind/cytoscape
                              cytoscape-example
                              {:element/style {:width "300px"
                                               :height "300px"}})}))
```
:::


Evaluate and render a single form
in the context of the current namespace (`*ns*`)
as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:single-form '(kind/cytoscape
                              cytoscape-example
                              {:element/style {:width "300px"
                                               :height "300px"}})}))
```
:::


Render a single value
as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:single-value (kind/cytoscape
                              cytoscape-example
                              {:element/style {:width "300px"
                                               :height "300px"}})}))
```
:::


Evaluate and render
the namespace in `"notebooks/index.clj"`
as a Quarto qmd file
then, using Quarto, render that file as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :html]
               :source-path "notebooks/index.clj"}))
```
:::


Evaluate and render
the namespace in `"notebooks/index.clj"`
as a Quarto qmd file
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :html]
               :source-path "notebooks/index.clj"
               :run-quarto false}))
```
:::


Evaluate and render
the namespace in `"notebooks/slides.clj"`
as a Quarto qmd file
(using its namespace-specific config from the ns metadata)
then, using Quarto, render that file as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :html]
               :source-path "notebooks/slides.clj"}))
```
:::


Evaluate and render
the namespace in `"notebooks/slides.clj"`
as a Quarto qmd file
(using its namespace-specific config from the ns metadata)
then, using Quarto, render that file as a reveal.js slideshow
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :revealjs]
               :source-path "notebooks/slides.clj"}))
```
:::


Evaluate and render
the namespace in `"notebooks/index.clj"`
as a Quarto qmd file
with a custom Quarto config
then, using Quarto, render that file as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :html]
               :source-path "notebooks/index.clj"
               :quarto {:highlight-style :nord}}))
```
:::


Evaluate and render
the namespace in `"index.clj"`
under the `"notebooks"` directory
as HTML
and show it at the browser:


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:base-source-path "notebooks/"
               :source-path "index.clj"}))
```
:::


Create a Quarto book
(to be documented better soon):


::: {.sourceClojure}
```clojure
(comment
  (clay/make! {:format [:quarto :html]
               :base-source-path "notebooks"
               :source-path ["index.clj"
                             "chapter.clj"]
               :base-target-path "book"
               :book {:title "Book Example"}
               ;; Empty the target directory first:
               :clean-up-target-dir true}))
```
:::


Reopen the Clay view in the browser
(in case you closed the browser tab previously opened):


::: {.sourceClojure}
```clojure
(comment
  (clay/browse!))
```
:::



## Configutation
Calls to the `make!` function are affected by various parameters
which collected as one nested map.
This map is the result of deep-merging four sources:

- the default configuration: [clay-default.edn](https://github.com/scicloj/clay/blob/main/resources/clay-default.edn) under Clay's resources

- the user configuration: `clay.edn` at the top

- the namespace configuration: the `:clay` member of the namespace metadata

- the call configuration: the argument to `make!`

Here are some of the parameters worth knowing about:

**(to be documented soon)**

## Kinds
The way things should be visualized is determined by the advice of
[Kindly](https://github.com/scicloj/kindly).
In this namespace we demonstrate Kindly's default advice.
User-defined Kindly advices should work as well.
Kindly advises tools (like Clay) about the kind of way a given context
should be displayed, by assigning to it a so-called kind.
Please refer to the Kindly documentation for details about specifying
and using kinds.

## Examples

### Plain values
By default, when there is no kind information provided by Kindly,
values are simply pretty-printed.


::: {.sourceClojure}
```clojure
(+ 4 5)
```
:::



::: {.printedClojure}
```clojure
9

```
:::



::: {.sourceClojure}
```clojure
(str "abcd" "efgh")
```
:::



::: {.printedClojure}
```clojure
"abcdefgh"

```
:::



### Hidden
Values of :kind/hidden are not shown.


::: {.sourceClojure}
```clojure
(kind/hidden 9)
```
:::





### Hiccup
[Hiccup](https://github.com/weavejester/hiccup), a popular Clojure way to represent HTML, can be specified by kind:


::: {.sourceClojure}
```clojure
(kind/hiccup
 [:ul
  [:li [:p "hi"]]
  [:li [:big [:big [:p {:style ; https://www.htmlcsscolor.com/hex/7F5F3F
                        {:color "#7F5F3F"}}
                    "hello"]]]]])
```
:::


<div style="max-height:600px;overflow-y:auto;"><ul><li><p>hi</p></li><li><big><big><p style="color:#7F5F3F;">hello</p></big></big></li></ul></div>

As we can see, this kind is displayed by converting Hiccup to HTML.

### Reagent


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn [numbers]
     [:p {:style {:background "#d4ebe9"}}
      (pr-str (map inc numbers))])
  (vec (range 40))])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id1"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [numbers] [:p {:style {:background "#d4ebe9"}} (pr-str (map inc numbers))])) (vec (range 40))]) (js/document.getElementById "id1"))</script></div></div>

From the [reagent tutorial](https://reagent-project.github.io/):


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn []
     (let [*click-count (reagent.core/atom 0)]
       (fn []
         [:div
          "The atom " [:code "*click-count"] " has value: "
          @*click-count ". "
          [:input {:type "button" :value "Click me!"
                   :on-click #(swap! *click-count inc)}]])))])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id2"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [] (let [*click-count (reagent.core/atom 0)] (fn [] [:div "The atom " [:code "*click-count"] " has value: " (clojure.core/deref *click-count) ". " [:input {:type "button", :value "Click me!", :on-click (fn* [] (swap! *click-count inc))}]]))))]) (js/document.getElementById "id2"))</script></div></div>

[d3-require](https://github.com/d3/d3-require) can be used to provide js dependencies:


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn []
     (reagent.core/with-let
       [*result (reagent.core/atom nil)]
       (-> js/d3
           (.require "d3-array")
           (.then (fn [d3-array]
                    (reset! *result
                            (-> d3-array
                                (.range 9)
                                pr-str)))))
       [:pre @*result]))])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id3"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [] (reagent.core/with-let [*result (reagent.core/atom nil)] (-> js/d3 (.require "d3-array") (.then (fn [d3-array] (reset! *result (-> d3-array (.range 9) pr-str))))) [:pre (clojure.core/deref *result)])))]) (js/document.getElementById "id3"))</script></div></div>


### HTML
Raw html can be represented as a kind too:


::: {.sourceClojure}
```clojure
(kind/html "<div style='height:40px; width:40px; background:purple'></div> ")
```
:::


<div style='height:40px; width:40px; background:purple'></div> 


::: {.sourceClojure}
```clojure
(kind/html
 "
<svg height=100 width=100>
<circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' />
</svg> ")
```
:::



<svg height=100 width=100>
<circle cx=50 cy=50 r=40 stroke='purple' stroke-width=3 fill='floralwhite' />
</svg> 


### Markdown
Markdown text (a vector of strings) can be handled using a kind too.


::: {.sourceClojure}
```clojure
(kind/md
 "This is [markdown](https://www.markdownguide.org/).")
```
:::


This is [markdown](https://www.markdownguide.org/).


::: {.sourceClojure}
```clojure
(kind/md
 ["
* This is [markdown](https://www.markdownguide.org/).
  * *Isn't it??*"
  "
* Here is **some more** markdown."])
```
:::



* This is [markdown](https://www.markdownguide.org/).
  * *Isn't it??*

* Here is **some more** markdown.

When rendering through Quarto, LaTeX formulae are supported as well.


::: {.sourceClojure}
```clojure
(kind/md
 "Let $x=9$. Then $$x+11=20$$")
```
:::


Let $x=9$. Then $$x+11=20$$


### Images
Java BufferedImage objects are displayed as images.


::: {.sourceClojure}
```clojure
(import javax.imageio.ImageIO
        java.net.URL)
```
:::



::: {.printedClojure}
```clojure
java.net.URL

```
:::



::: {.sourceClojure}
```clojure
(defonce clay-image
  (->  "https://upload.wikimedia.org/wikipedia/commons/2/2c/Clay-ss-2005.jpg"
       (URL.)
       (ImageIO/read)))
```
:::



::: {.sourceClojure}
```clojure
clay-image
```
:::


<div style="max-height:600px;overflow-y:auto;"><img src="index_files/0.png" style="width:100%;" /></div>


### Plain data structures
Plain data structures (lists and sequnces, vectors, sets, maps)
are pretty printed if there isn't any value inside
which needs to be displayed in special kind of way.


::: {.sourceClojure}
```clojure
(def people-as-maps
  (->> (range 29)
       (mapv (fn [i]
               {:preferred-language (["clojure" "clojurescript" "babashka"]
                                     (rand-int 3))
                :age (rand-int 100)}))))
```
:::



::: {.sourceClojure}
```clojure
(def people-as-vectors
  (->> people-as-maps
       (mapv (juxt :preferred-language :age))))
```
:::



::: {.sourceClojure}
```clojure
(take 5 people-as-maps)
```
:::



::: {.printedClojure}
```clojure
({:preferred-language "babashka", :age 9}
 {:preferred-language "clojurescript", :age 58}
 {:preferred-language "clojurescript", :age 61}
 {:preferred-language "babashka", :age 32}
 {:preferred-language "clojure", :age 55})

```
:::



::: {.sourceClojure}
```clojure
(take 5 people-as-vectors)
```
:::



::: {.printedClojure}
```clojure
(["babashka" 9]
 ["clojurescript" 58]
 ["clojurescript" 61]
 ["babashka" 32]
 ["clojure" 55])

```
:::



::: {.sourceClojure}
```clojure
(->> people-as-vectors
     (take 5)
     set)
```
:::



::: {.printedClojure}
```clojure
#{["babashka" 9]
  ["babashka" 32]
  ["clojurescript" 61]
  ["clojure" 55]
  ["clojurescript" 58]}

```
:::


When something inside needs to be displayed in a special kind of way,
the data structures are printed in a way that makes that clear.


::: {.sourceClojure}
```clojure
(def nested-structure-1
  {:vector-of-numbers [2 9 -1]
   :vector-of-different-things ["hi"
                                (kind/hiccup
                                 [:big [:big "hello"]])]
   :map-of-different-things {:markdown (kind/md ["*hi*, **hi**"])
                             :number 9999}
   :hiccup (kind/hiccup
            [:big [:big "bye"]])})
```
:::



::: {.sourceClojure}
```clojure
nested-structure-1
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>{</p><div style="margin-left:10%;width:110%;"><div><pre><code class="language-clojure">:vector-of-numbers [2 9 -1]</code></pre></div><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:vector-of-different-things
</code></pre></div></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><div><p>\[</p><div style="margin-left:10%;width:110%;"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">"hi"
</code></pre></div></div><div style="max-height:600px;overflow-y:auto;"><big><big>hello</big></big></div></div><p>\]</p></div></div></div></td></tr></table><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:map-of-different-things
</code></pre></div></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><div><p>{</p><div style="margin-left:10%;width:110%;"><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:markdown
</code></pre></div></div></td><td><div style="margin-left:10px;"><div><p><em>hi</em>, <strong>hi</strong></p></div></div></td></tr></table><div><pre><code class="language-clojure">:number 9999</code></pre></div></div><p>}</p></div></div></div></td></tr></table><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:hiccup
</code></pre></div></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><big><big>bye</big></big></div></div></td></tr></table></div><p>}</p></div></div>


### Pretty printing
The `:kind/pprint` kind  makes sure to simply pretty-print values:


::: {.sourceClojure}
```clojure
(kind/pprint nested-structure-1)
```
:::



::: {.printedClojure}
```clojure
{:vector-of-numbers [2 9 -1],
 :vector-of-different-things ["hi" [:big [:big "hello"]]],
 :map-of-different-things {:markdown ["*hi*, **hi**"], :number 9999},
 :hiccup [:big [:big "bye"]]}

```
:::



### Datasets
[tech.ml.dataset](https://github.com/techascent/tech.ml.dataset) datasets currently use the default printing of the library,
Let us create such a dataset using [Tablecloth](https://github.com/scicloj/tablecloth).


::: {.sourceClojure}
```clojure
(require '[tablecloth.api :as tc])
```
:::



::: {.sourceClojure}
```clojure
(-> {:x (range 6)
     :y [:A :B :C :A :B :C]}
    tc/dataset)
```
:::


_unnamed [6 2]:

| :x | :y |
|---:|----|
|  0 | :A |
|  1 | :B |
|  2 | :C |
|  3 | :A |
|  4 | :B |
|  5 | :C |




::: {.sourceClojure}
```clojure
(-> {:x [1 [2 3] 4]
     :y [:A :B :C]}
    tc/dataset)
```
:::


_unnamed [3 2]:

|    :x | :y |
|-------|----|
|     1 | :A |
| [2 3] | :B |
|     4 | :C |




::: {.sourceClojure}
```clojure
(-> [{:x 1 :y 2 :z 3}
     {:y 4 :z 5}]
    tc/dataset)
```
:::


_unnamed [2 3]:

| :x | :y | :z |
|---:|---:|---:|
|  1 |  2 |  3 |
|    |  4 |  5 |




::: {.sourceClojure}
```clojure
(-> people-as-maps
    tc/dataset)
```
:::


_unnamed [29 2]:

| :preferred-language | :age |
|---------------------|-----:|
|            babashka |    9 |
|       clojurescript |   58 |
|       clojurescript |   61 |
|            babashka |   32 |
|             clojure |   55 |
|             clojure |   61 |
|             clojure |   61 |
|             clojure |   67 |
|       clojurescript |   45 |
|             clojure |   18 |
|                 ... |  ... |
|       clojurescript |   15 |
|             clojure |    8 |
|            babashka |   11 |
|             clojure |   57 |
|       clojurescript |   61 |
|             clojure |   72 |
|             clojure |   80 |
|            babashka |   89 |
|            babashka |   80 |
|       clojurescript |   41 |
|             clojure |   57 |




### Tables
The `:kind/table` kind can be handy for an interactive table view.


::: {.sourceClojure}
```clojure
(kind/table
 {:column-names [:preferred-language :age]
  :row-vectors people-as-vectors})
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody></table></div>


::: {.sourceClojure}
```clojure
(kind/table
 {:column-names [:preferred-language :age]
  :row-maps people-as-maps})
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody></table></div>


::: {.sourceClojure}
```clojure
(kind/table
 {:column-names [:preferred-language :age]
  :row-maps (take 5 people-as-maps)})
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr></tbody></table></div>


::: {.sourceClojure}
```clojure
(def people-as-dataset
  (tc/dataset people-as-maps))
```
:::



::: {.sourceClojure}
```clojure
(-> people-as-dataset
    kind/table)
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody></table></div>

Additional options may hint at way the table should be rendered.


::: {.sourceClojure}
```clojure
(-> people-as-dataset
    (kind/table {:element/max-height "300px"}))
```
:::


<div style="max-height:300px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody></table></div>


::: {.sourceClojure}
```clojure
(-> people-as-dataset
    (kind/table {:element/max-height nil}))
```
:::


<table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody></table>

It is possible to use [datatables](https://datatables.net/) to reneder `kind/table`,
and in this case the user may specify [datatables options](https://datatables.net/manual/options)
(see [the full list](https://datatables.net/reference/option/)).


::: {.sourceClojure}
```clojure
(-> people-as-maps
    tc/dataset
    (kind/table {:use-datatables true}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody><script>new DataTable(document.currentScript.parentElement, {"paging":false,"scrollY":400,"sPaginationType":"full_numbers","order":[]});</script></table></div>


::: {.sourceClojure}
```clojure
(-> people-as-dataset
    (kind/table {:use-datatables true
                 :datatables {:scrollY 300
                              :paging false}}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>preferred-language</th><th>age</th></tr></thead><tbody><tr><td><div><p>babashka</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>55</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>67</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>45</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>58</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>53</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>79</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>82</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>61</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>72</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>89</p></div></td></tr><tr><td><div><p>babashka</p></div></td><td><div><p>80</p></div></td></tr><tr><td><div><p>clojurescript</p></div></td><td><div><p>41</p></div></td></tr><tr><td><div><p>clojure</p></div></td><td><div><p>57</p></div></td></tr></tbody><script>new DataTable(document.currentScript.parentElement, {"paging":false,"scrollY":300,"sPaginationType":"full_numbers","order":[]});</script></table></div>


### ML models


::: {.sourceClojure}
```clojure
(require '[scicloj.noj.v1.datasets :as datasets]
         '[scicloj.noj.v1.stats :as noj.stats]
         '[scicloj.ml.core :as ml])
```
:::



::: {.sourceClojure}
```clojure
(-> datasets/iris
    (noj.stats/linear-regression-model :sepal-length
                                       [:sepal-width
                                        :petal-width
                                        :petal-length])
    ml/thaw-model)
```
:::



::: {.printedClojure}
```clojure
Linear Model:

Residuals:
       Min          1Q      Median          3Q         Max
   -0.8282     -0.2202      0.0191      0.1992      0.8457

Coefficients:
                  Estimate Std. Error    t value   Pr(>|t|)
Intercept           1.8560     0.2508     7.4010     0.0000 ***
sepal-width         0.6508     0.0666     9.7654     0.0000 ***
petal-width        -0.5565     0.1275    -4.3629     0.0000 ***
petal-length        0.7091     0.0567    12.5025     0.0000 ***
---------------------------------------------------------------------
Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.3145 on 146 degrees of freedom
Multiple R-squared: 0.8586,    Adjusted R-squared: 0.8557
F-statistic: 295.5391 on 4 and 146 DF,  p-value: 8.588e-62

```
:::



### [Vega](https://vega.github.io/vega/) and [Vega-Lite](https://vega.github.io/vega-lite/)


::: {.sourceClojure}
```clojure
(defn vega-lite-point-plot [data]
  (-> {:data {:values data},
       :mark "point"
       :encoding
       {:size {:field "w" :type "quantitative"}
        :x {:field "x", :type "quantitative"},
        :y {:field "y", :type "quantitative"},
        :fill {:field "z", :type "nominal"}}}
      kind/vega-lite))
```
:::



::: {.sourceClojure}
```clojure
(defn random-data [n]
  (->> (repeatedly n #(- (rand) 0.5))
       (reductions +)
       (map-indexed (fn [x y]
                      {:w (rand-int 9)
                       :z (rand-int 9)
                       :x x
                       :y y}))))
```
:::



::: {.sourceClojure}
```clojure
(defn random-vega-lite-plot [n]
  (-> n
      random-data
      vega-lite-point-plot))
```
:::



::: {.sourceClojure}
```clojure
(random-vega-lite-plot 9)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"values":[{"w":0,"z":5,"x":0,"y":-0.014355198544000136},{"w":5,"z":3,"x":1,"y":-0.35964154243420077},{"w":5,"z":0,"x":2,"y":-0.5956550684871694},{"w":0,"z":8,"x":3,"y":-0.40976996209633754},{"w":6,"z":2,"x":4,"y":-0.6514550403051202},{"w":8,"z":4,"x":5,"y":-0.4410011248361132},{"w":0,"z":8,"x":6,"y":-0.5187569420013641},{"w":1,"z":2,"x":7,"y":-0.9328362208547698},{"w":6,"z":7,"x":8,"y":-1.0598702808204423}]},"mark":"point","encoding":{"size":{"field":"w","type":"quantitative"},"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"},"fill":{"field":"z","type":"nominal"}}});</script></div></div>

When the vega/vega-lite data is given in CSV format,
Clay will serve it in a separate CSV file alongside the generated HTML.


::: {.sourceClojure}
```clojure
(-> {:data {:values "x,y
1,1
2,4
3,9
-1,1
-2,4
-3,9"
            :format {:type :csv}},
     :mark "point"
     :encoding
     {:x {:field "x", :type "quantitative"}
      :y {:field "y", :type "quantitative"}}}
    kind/vega-lite)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"url":"index_files\/1.csv","format":{"type":"csv"}},"mark":"point","encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}}});</script></div></div>


### Cytoscape


::: {.sourceClojure}
```clojure
(def cytoscape-example
  {:elements {:nodes [{:data {:id "a" :parent "b"} :position {:x 215 :y 85}}
                      {:data {:id "b"}}
                      {:data {:id "c" :parent "b"} :position {:x 300 :y 85}}
                      {:data {:id "d"} :position {:x 215 :y 175}}
                      {:data {:id "e"}}
                      {:data {:id "f" :parent "e"} :position {:x 300 :y 175}}]
              :edges [{:data {:id "ad" :source "a" :target "d"}}
                      {:data {:id "eb" :source "e" :target "b"}}]}
   :style [{:selector "node"
            :css {:content "data(id)"
                  :text-valign "center"
                  :text-halign "center"}}
           {:selector "parent"
            :css {:text-valign "top"
                  :text-halign "center"}}
           {:selector "edge"
            :css {:curve-style "bezier"
                  :target-arrow-shape "triangle"}}]
   :layout {:name "preset"
            :padding 5}})
```
:::



::: {.sourceClojure}
```clojure
(kind/cytoscape
 cytoscape-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
{
  value = {"elements":{"nodes":[{"data":{"id":"a","parent":"b"},"position":{"x":215,"y":85}},{"data":{"id":"b"}},{"data":{"id":"c","parent":"b"},"position":{"x":300,"y":85}},{"data":{"id":"d"},"position":{"x":215,"y":175}},{"data":{"id":"e"}},{"data":{"id":"f","parent":"e"},"position":{"x":300,"y":175}}],"edges":[{"data":{"id":"ad","source":"a","target":"d"}},{"data":{"id":"eb","source":"e","target":"b"}}]},"style":[{"selector":"node","css":{"content":"data(id)","text-valign":"center","text-halign":"center"}},{"selector":"parent","css":{"text-valign":"top","text-halign":"center"}},{"selector":"edge","css":{"curve-style":"bezier","target-arrow-shape":"triangle"}}],"layout":{"name":"preset","padding":5}};
  value['container'] = document.currentScript.parentElement;
  cytoscape(value);
};</script></div></div>


::: {.sourceClojure}
```clojure
(-> cytoscape-example
    (kind/cytoscape {:element/style
                     {:width "100px"
                      :height "100px"}}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:100px;width:100px;"><script>
{
  value = {"elements":{"nodes":[{"data":{"id":"a","parent":"b"},"position":{"x":215,"y":85}},{"data":{"id":"b"}},{"data":{"id":"c","parent":"b"},"position":{"x":300,"y":85}},{"data":{"id":"d"},"position":{"x":215,"y":175}},{"data":{"id":"e"}},{"data":{"id":"f","parent":"e"},"position":{"x":300,"y":175}}],"edges":[{"data":{"id":"ad","source":"a","target":"d"}},{"data":{"id":"eb","source":"e","target":"b"}}]},"style":[{"selector":"node","css":{"content":"data(id)","text-valign":"center","text-halign":"center"}},{"selector":"parent","css":{"text-valign":"top","text-halign":"center"}},{"selector":"edge","css":{"curve-style":"bezier","target-arrow-shape":"triangle"}}],"layout":{"name":"preset","padding":5}};
  value['container'] = document.currentScript.parentElement;
  cytoscape(value);
};</script></div></div>


### ECharts
This example is taken from Apache ECharts' [Getting Started](https://echarts.apache.org/handbook/en/get-started/).


::: {.sourceClojure}
```clojure
(def echarts-example
  {:title {:text "Echarts Example"}
   :tooltip {}
   :legend {:data ["sales"]}
   :xAxis {:data ["Shirts", "Cardigans", "Chiffons",
                  "Pants", "Heels", "Socks"]}
   :yAxis {}
   :series [{:name "sales"
             :type "bar"
             :data [5 20 36
                    10 10 20]}]})
```
:::



::: {.sourceClojure}
```clojure
(kind/echarts
 echarts-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
{
  var myChart = echarts.init(document.currentScript.parentElement);
  myChart.setOption({"title":{"text":"Echarts Example"},"tooltip":{},"legend":{"data":["sales"]},"xAxis":{"data":["Shirts","Cardigans","Chiffons","Pants","Heels","Socks"]},"yAxis":{},"series":[{"name":"sales","type":"bar","data":[5,20,36,10,10,20]}]});
};</script></div></div>


::: {.sourceClojure}
```clojure
(-> echarts-example
    (kind/echarts {:element/style
                   {:width "500px"
                    :height "200px"}}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:200px;width:500px;"><script>
{
  var myChart = echarts.init(document.currentScript.parentElement);
  myChart.setOption({"title":{"text":"Echarts Example"},"tooltip":{},"legend":{"data":["sales"]},"xAxis":{"data":["Shirts","Cardigans","Chiffons","Pants","Heels","Socks"]},"yAxis":{},"series":[{"name":"sales","type":"bar","data":[5,20,36,10,10,20]}]});
};</script></div></div>


### Plotly


::: {.sourceClojure}
```clojure
(def plotly-example
  {:data [{:x [0 1 3 2]
           :y [0 6 4 5]
           :z [0 8 9 7]
           :type :scatter3d
           :mode :lines+markers
           :opacity 0.5
           :line {:width 5}
           :marker {:size 4
                    :colorscale :Viridis}}]})
```
:::



::: {.sourceClojure}
```clojure
(kind/plotly
 plotly-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
Plotly.newPlot(document.currentScript.parentElement,
 {"data":[{"x":[0,1,3,2],"y":[0,6,4,5],"z":[0,8,9,7],"type":"scatter3d","mode":"lines+markers","opacity":0.5,"line":{"width":5},"marker":{"size":4,"colorscale":"Viridis"}}]}['data']
);
</script></div></div>


::: {.sourceClojure}
```clojure
(-> plotly-example
    (kind/plotly {:element/style
                  {:width "300px"
                   :height "300px"}}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:300px;width:300px;"><script>
Plotly.newPlot(document.currentScript.parentElement,
 {"data":[{"x":[0,1,3,2],"y":[0,6,4,5],"z":[0,8,9,7],"type":"scatter3d","mode":"lines+markers","opacity":0.5,"line":{"width":5},"marker":{"size":4,"colorscale":"Viridis"}}]}['data']
);
</script></div></div>


### Leaflet
(experimental)
This example was adapted from [the Leaflet website](https://leafletjs.com/).


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn []
     [:div
      [:div {:style {:height "200px"}
             :ref (fn [el]
                    (let [m (-> js/L
                                (.map el)
                                (.setView (clj->js [51.505 -0.09])
                                          13))]
                      (-> js/L
                          (.tileLayer "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
                                      (clj->js
                                       {:maxZoom 19
                                        :attribution "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>"}))
                          (.addTo m))
                      (-> js/L
                          (.marker (clj->js [51.5 -0.09]))
                          (.addTo m)
                          (.bindPopup "A pretty CSS popup.<br> Easily customizable.")
                          (.openPopup))))}]])]
 {:reagent/deps [:leaflet]})
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id4"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [] [:div [:div {:style {:height "200px"}, :ref (fn [el] (let [m (-> js/L (.map el) (.setView (clj->js [51.505 -0.09]) 13))] (-> js/L (.tileLayer "https://tile.openstreetmap.org/{z}/{x}/{y}.png" (clj->js {:maxZoom 19, :attribution "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>"})) (.addTo m)) (-> js/L (.marker (clj->js [51.5 -0.09])) (.addTo m) (.bindPopup "A pretty CSS popup.<br> Easily customizable.") (.openPopup))))}]]))] #:reagent{:deps [:leaflet]}) (js/document.getElementById "id4"))</script></div></div>


### 3DMol.js
Embedding a 3Dmol Viewer ([original example](https://3dmol.csb.pitt.edu/doc/tutorial-embeddable.html)):


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn [{:keys [data-pdb]}]
     [:div {:style {:height "400px"
                    :width "400px"
                    :position :relative}
            :class "viewer_3Dmoljs"
            :data-pdb data-pdb
            :data-backgroundcolor "0xffffff"
            :data-style "stick"
            :data-ui true}])
  {:data-pdb "2POR"}]
 {:reagent/deps [:three-d-mol]})
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id5"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [{:keys [data-pdb]}] [:div {:style {:height "400px", :width "400px", :position :relative}, :class "viewer_3Dmoljs", :data-pdb data-pdb, :data-backgroundcolor "0xffffff", :data-style "stick", :data-ui true}])) {:data-pdb "2POR"}] #:reagent{:deps [:three-d-mol]}) (js/document.getElementById "id5"))</script></div></div>

Using 3Dmol within your code (inspired by [these examples](https://3dmol.csb.pitt.edu/doc/tutorial-code.html)):


::: {.sourceClojure}
```clojure
(defonce pdb-2POR
  (slurp "https://files.rcsb.org/download/2POR.pdb"))
```
:::



::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn [{:keys [pdb-data]}]
     [:div
      {:style {:width "100%"
               :height "500px"
               :position "relative"}
       :ref (fn [el]
              (let [config (clj->js
                            {:backgroundColor "0xffffff"})
                    viewer (.createViewer js/$3Dmol el)]
                (.setViewStyle viewer (clj->js
                                       {:style "outline"}))
                (.addModelsAsFrames viewer pdb-data "pdb")
                (.addSphere viewer (clj->js
                                    {:center {:x 0
                                              :y 0
                                              :z 0}
                                     :radius 5
                                     :color "green"
                                     :alpha 0.2}))
                (.zoomTo viewer)
                (.render viewer)
                (.zoom viewer 0.8 2000)))}])
  {:pdb-data pdb-2POR}]
 {:reagent/deps [:three-d-mol]})
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id6"><script type="application/x-scittle">(reagent.dom/render (kind/reagent [(quote (fn [{:keys [pdb-data]}] [:div {:style {:width "100%", :height "500px", :position "relative"}, :ref (fn [el] (let [config (clj->js {:backgroundColor "0xffffff"}) viewer (.createViewer js/$3Dmol el)] (.setViewStyle viewer (clj->js {:style "outline"})) (.addModelsAsFrames viewer pdb-data "pdb") (.addSphere viewer (clj->js {:center {:x 0, :y 0, :z 0}, :radius 5, :color "green", :alpha 0.2})) (.zoomTo viewer) (.render viewer) (.zoom viewer 0.8 2000)))}])) {:pdb-data pdb-2POR}] #:reagent{:deps [:three-d-mol]}) (js/document.getElementById "id6"))</script></div></div>


### Embedded Portal


::: {.sourceClojure}
```clojure
(kind/portal {:x (range 3)})
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>portal_api.embed().renderOutputItem(
                {'mime': 'x-application/edn',
                 'text': (() => "^{:source \"{:x (range 3)}\", :line 730, :column 14, :end-line 730, :end-column 28} {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :x]] (^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 0]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]])}")}
                , document.currentScript.parentElement);</script></div></div>


::: {.sourceClojure}
```clojure
(kind/portal
 [(kind/hiccup [:img {:height 50 :width 50
                      :src "https://clojure.org/images/clojure-logo-120b.png"}])
  (kind/hiccup [:img {:height 50 :width 50
                      :src "https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg"}])])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>portal_api.embed().renderOutputItem(
                {'mime': 'x-application/edn',
                 'text': (() => "[^{:source \"[:img {:height 50 :width 50\\n                      :src \\\"https://clojure.org/images/clojure-logo-120b.png\\\"}]\", :line 733, :column 16, :end-line 734, :end-column 80, :kindly/kind :kind/hiccup, :portal.viewer/default :portal.viewer/hiccup} [:img ^{:source \"{:height 50 :width 50\\n                      :src \\\"https://clojure.org/images/clojure-logo-120b.png\\\"}\", :line 733, :column 22, :end-line 734, :end-column 79} {:height 50, :width 50, :src \"https://clojure.org/images/clojure-logo-120b.png\"}] ^{:source \"[:img {:height 50 :width 50\\n                      :src \\\"https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg\\\"}]\", :line 735, :column 16, :end-line 736, :end-column 141, :kindly/kind :kind/hiccup, :portal.viewer/default :portal.viewer/hiccup} [:img ^{:source \"{:height 50 :width 50\\n                      :src \\\"https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg\\\"}\", :line 735, :column 22, :end-line 736, :end-column 140} {:height 50, :width 50, :src \"https://raw.githubusercontent.com/djblue/portal/fbc54632adc06c6e94a3d059c858419f0063d1cf/resources/splash.svg\"}]]")}
                , document.currentScript.parentElement);</script></div></div>


::: {.sourceClojure}
```clojure
(kind/portal
 [(kind/hiccup [:big [:big "a plot"]])
  (random-vega-lite-plot 9)])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>portal_api.embed().renderOutputItem(
                {'mime': 'x-application/edn',
                 'text': (() => "[^{:source \"[:big [:big \\\"a plot\\\"]]\", :line 739, :column 16, :end-line 739, :end-column 38, :kindly/kind :kind/hiccup, :portal.viewer/default :portal.viewer/hiccup} [:big ^{:source \"[:big \\\"a plot\\\"]\", :line 739, :column 22, :end-line 739, :end-column 37} [:big \"a plot\"]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:portal.viewer/vega-lite ^{:source \"{:data {:values data},\\n       :mark \\\"point\\\"\\n       :encoding\\n       {:size {:field \\\"w\\\" :type \\\"quantitative\\\"}\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"},\\n        :y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :fill {:field \\\"z\\\", :type \\\"nominal\\\"}}}\", :line 530, :column 7, :end-line 536, :end-column 46, :kindly/kind :kind/vega-lite} {:data ^{:source \"{:values data}\", :line 530, :column 14, :end-line 530, :end-column 28} {:values (^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 7, :z 7, :x 0, :y 0.4277996675892035} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 0, :z 7, :x 1, :y 0.23134838639764055} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 8, :z 4, :x 2, :y -0.04557257887184707} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 6, :z 5, :x 3, :y -0.0920283886367329} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 7, :z 7, :x 4, :y 0.25811034919374287} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 2, :z 6, :x 5, :y -0.1472357572541586} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 4, :z 5, :x 6, :y -0.11331108019762848} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 2, :z 8, :x 7, :y 0.13402728958787102} ^{:source \"{:w (rand-int 9)\\n                       :z (rand-int 9)\\n                       :x x\\n                       :y y}\", :line 543, :column 23, :end-line 546, :end-column 29} {:w 1, :z 7, :x 8, :y 0.43686970033396744})}, :mark \"point\", :encoding ^{:source \"{:size {:field \\\"w\\\" :type \\\"quantitative\\\"}\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"},\\n        :y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :fill {:field \\\"z\\\", :type \\\"nominal\\\"}}\", :line 533, :column 8, :end-line 536, :end-column 45} {:size ^{:source \"{:field \\\"w\\\" :type \\\"quantitative\\\"}\", :line 533, :column 15, :end-line 533, :end-column 48} {:field \"w\", :type \"quantitative\"}, :x ^{:source \"{:field \\\"x\\\", :type \\\"quantitative\\\"}\", :line 534, :column 12, :end-line 534, :end-column 46} {:field \"x\", :type \"quantitative\"}, :y ^{:source \"{:field \\\"y\\\", :type \\\"quantitative\\\"}\", :line 535, :column 12, :end-line 535, :end-column 46} {:field \"y\", :type \"quantitative\"}, :fill ^{:source \"{:field \\\"z\\\", :type \\\"nominal\\\"}\", :line 536, :column 15, :end-line 536, :end-column 44} {:field \"z\", :type \"nominal\"}}}]]")}
                , document.currentScript.parentElement);</script></div></div>


### Nesting kinds in Hiccup


::: {.sourceClojure}
```clojure
(kind/hiccup
 [:div {:style {:background "#f5f3ff"
                :border "solid"}}

  [:hr]
  [:h3 [:code ":kind/md"]]
  (kind/md "*some text* **some more text**")

  [:hr]
  [:h3 [:code ":kind/code"]]
  (kind/code "{:x (1 2 [3 4])}")

  [:hr]
  [:h3 [:code "kind/dataset"]]
  (tc/dataset {:x (range 33)
               :y (map inc (range 33))})

  [:hr]
  [:h3 [:code "kind/table"]]
  (kind/table
   (tc/dataset {:x (range 33)
                :y (map inc (range 33))}))

  [:hr]
  [:h3 [:code "kind/vega-lite"]]
  (random-vega-lite-plot 9)

  [:hr]
  [:h3 [:code "kind/vega-lite"]]
  (-> {:data {:values "x,y
1,1
2,4
3,9
-1,1
-2,4
-3,9"
              :format {:type :csv}},
       :mark "point"
       :encoding
       {:x {:field "x", :type "quantitative"}
        :y {:field "y", :type "quantitative"}}}
      kind/vega-lite)

  [:hr]
  [:h3 [:code "kind/reagent"]]
  (kind/reagent
   ['(fn [numbers]
       [:p {:style {:background "#d4ebe9"}}
        (pr-str (map inc numbers))])
    (vec (range 40))])])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="background:#f5f3ff;border:solid;"><hr /><h3><code>:kind/md</code></h3><div><p><em>some text</em> <strong>some more text</strong></p></div><hr /><h3><code>:kind/code</code></h3><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">{:x (1 2 [3 4])}</code></pre></div></div><hr /><h3><code>kind/dataset</code></h3><div><p>_unnamed \[33 2\]:</p><table class="table"><thead><tr><th style="text-align:right;">:x</th><th style="text-align:right;">:y</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">2</td><td style="text-align:right;">3</td></tr><tr><td style="text-align:right;">3</td><td style="text-align:right;">4</td></tr><tr><td style="text-align:right;">4</td><td style="text-align:right;">5</td></tr><tr><td style="text-align:right;">5</td><td style="text-align:right;">6</td></tr><tr><td style="text-align:right;">6</td><td style="text-align:right;">7</td></tr><tr><td style="text-align:right;">7</td><td style="text-align:right;">8</td></tr><tr><td style="text-align:right;">8</td><td style="text-align:right;">9</td></tr><tr><td style="text-align:right;">9</td><td style="text-align:right;">10</td></tr><tr><td style="text-align:right;">...</td><td style="text-align:right;">...</td></tr><tr><td style="text-align:right;">22</td><td style="text-align:right;">23</td></tr><tr><td style="text-align:right;">23</td><td style="text-align:right;">24</td></tr><tr><td style="text-align:right;">24</td><td style="text-align:right;">25</td></tr><tr><td style="text-align:right;">25</td><td style="text-align:right;">26</td></tr><tr><td style="text-align:right;">26</td><td style="text-align:right;">27</td></tr><tr><td style="text-align:right;">27</td><td style="text-align:right;">28</td></tr><tr><td style="text-align:right;">28</td><td style="text-align:right;">29</td></tr><tr><td style="text-align:right;">29</td><td style="text-align:right;">30</td></tr><tr><td style="text-align:right;">30</td><td style="text-align:right;">31</td></tr><tr><td style="text-align:right;">31</td><td style="text-align:right;">32</td></tr><tr><td style="text-align:right;">32</td><td style="text-align:right;">33</td></tr></tbody></table></div><hr /><h3><code>kind/table</code></h3><div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td><div><p>0</p></div></td><td><div><p>1</p></div></td></tr><tr><td><div><p>1</p></div></td><td><div><p>2</p></div></td></tr><tr><td><div><p>2</p></div></td><td><div><p>3</p></div></td></tr><tr><td><div><p>3</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>4</p></div></td><td><div><p>5</p></div></td></tr><tr><td><div><p>5</p></div></td><td><div><p>6</p></div></td></tr><tr><td><div><p>6</p></div></td><td><div><p>7</p></div></td></tr><tr><td><div><p>7</p></div></td><td><div><p>8</p></div></td></tr><tr><td><div><p>8</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>9</p></div></td><td><div><p>10</p></div></td></tr><tr><td><div><p>10</p></div></td><td><div><p>11</p></div></td></tr><tr><td><div><p>11</p></div></td><td><div><p>12</p></div></td></tr><tr><td><div><p>12</p></div></td><td><div><p>13</p></div></td></tr><tr><td><div><p>13</p></div></td><td><div><p>14</p></div></td></tr><tr><td><div><p>14</p></div></td><td><div><p>15</p></div></td></tr><tr><td><div><p>15</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>16</p></div></td><td><div><p>17</p></div></td></tr><tr><td><div><p>17</p></div></td><td><div><p>18</p></div></td></tr><tr><td><div><p>18</p></div></td><td><div><p>19</p></div></td></tr><tr><td><div><p>19</p></div></td><td><div><p>20</p></div></td></tr><tr><td><div><p>20</p></div></td><td><div><p>21</p></div></td></tr><tr><td><div><p>21</p></div></td><td><div><p>22</p></div></td></tr><tr><td><div><p>22</p></div></td><td><div><p>23</p></div></td></tr><tr><td><div><p>23</p></div></td><td><div><p>24</p></div></td></tr><tr><td><div><p>24</p></div></td><td><div><p>25</p></div></td></tr><tr><td><div><p>25</p></div></td><td><div><p>26</p></div></td></tr><tr><td><div><p>26</p></div></td><td><div><p>27</p></div></td></tr><tr><td><div><p>27</p></div></td><td><div><p>28</p></div></td></tr><tr><td><div><p>28</p></div></td><td><div><p>29</p></div></td></tr><tr><td><div><p>29</p></div></td><td><div><p>30</p></div></td></tr><tr><td><div><p>30</p></div></td><td><div><p>31</p></div></td></tr><tr><td><div><p>31</p></div></td><td><div><p>32</p></div></td></tr><tr><td><div><p>32</p></div></td><td><div><p>33</p></div></td></tr></tbody></table></div><hr /><h3><code>kind/vega-lite</code></h3><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"values":[{"w":3,"z":7,"x":0,"y":0.11967587976376237},{"w":4,"z":4,"x":1,"y":0.43209572214492553},{"w":2,"z":4,"x":2,"y":0.5158213201076427},{"w":7,"z":5,"x":3,"y":0.25053772713525546},{"w":1,"z":1,"x":4,"y":0.206760256470906},{"w":4,"z":7,"x":5,"y":0.4347718530397937},{"w":2,"z":8,"x":6,"y":0.7403769984880382},{"w":2,"z":2,"x":7,"y":0.9070304271805908},{"w":5,"z":2,"x":8,"y":1.2960329758261406}]},"mark":"point","encoding":{"size":{"field":"w","type":"quantitative"},"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"},"fill":{"field":"z","type":"nominal"}}});</script></div></div><hr /><h3><code>kind/vega-lite</code></h3><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"url":"index_files\/1.csv","format":{"type":"csv"}},"mark":"point","encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}}});</script></div></div><hr /><h3><code>kind/reagent</code></h3><div style="max-height:600px;overflow-y:auto;"><div id="id7"><script type="application/x-scittle">(reagent.dom/render nil (js/document.getElementById "id7"))</script></div></div></div></div>


### Nesting kinds in Tables


::: {.sourceClojure}
```clojure
(kind/table
 {:column-names [:x :y]
  :row-vectors [[(kind/md "*some text* **some more text**")
                 (kind/code "{:x (1 2 [3 4])}")]
                [(tc/dataset {:x (range 3)
                              :y (map inc (range 3))})
                 (random-vega-lite-plot 9)]]})
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td><div><p><em>some text</em> <strong>some more text</strong></p></div></td><td><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">{:x (1 2 [3 4])}</code></pre></div></div></td></tr><tr><td><div><p>_unnamed \[3 2\]:</p><table class="table"><thead><tr><th style="text-align:right;">:x</th><th style="text-align:right;">:y</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">1</td></tr><tr><td style="text-align:right;">1</td><td style="text-align:right;">2</td></tr><tr><td style="text-align:right;">2</td><td style="text-align:right;">3</td></tr></tbody></table></div></td><td><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"values":[{"w":5,"z":7,"x":0,"y":-0.13387238083204067},{"w":4,"z":6,"x":1,"y":0.2167411545903789},{"w":6,"z":6,"x":2,"y":0.16207400836514974},{"w":0,"z":2,"x":3,"y":0.41556997993780664},{"w":3,"z":8,"x":4,"y":0.776077827494553},{"w":1,"z":3,"x":5,"y":1.2097060243597109},{"w":6,"z":3,"x":6,"y":1.2886203704765533},{"w":3,"z":8,"x":7,"y":0.9571770816674307},{"w":6,"z":6,"x":8,"y":1.0199533801807643}]},"mark":"point","encoding":{"size":{"field":"w","type":"quantitative"},"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"},"fill":{"field":"z","type":"nominal"}}});</script></div></div></td></tr></tbody></table></div>


### More nesting examples


::: {.sourceClojure}
```clojure
{:plot (random-vega-lite-plot 9)
 :dataset (tc/dataset {:x (range 3)
                       :y (repeatedly 3 rand)})}
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>{</p><div style="margin-left:10%;width:110%;"><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:plot
</code></pre></div></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"values":[{"w":2,"z":5,"x":0,"y":-0.14547564208225383},{"w":6,"z":4,"x":1,"y":-0.44861805916943853},{"w":2,"z":8,"x":2,"y":-0.034234735995716914},{"w":8,"z":4,"x":3,"y":-0.2515123531864556},{"w":7,"z":3,"x":4,"y":-0.04757738234504982},{"w":4,"z":8,"x":5,"y":0.058298710958972544},{"w":4,"z":5,"x":6,"y":-0.19217539409393125},{"w":6,"z":3,"x":7,"y":-0.04625542245372438},{"w":5,"z":4,"x":8,"y":-0.1520676467582761}]},"mark":"point","encoding":{"size":{"field":"w","type":"quantitative"},"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"},"fill":{"field":"z","type":"nominal"}}});</script></div></div></div></td></tr></table><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:dataset
</code></pre></div></div></td><td><div style="margin-left:10px;"><div><p>_unnamed \[3 2\]:</p><table class="table"><thead><tr><th style="text-align:right;">:x</th><th style="text-align:right;">:y</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">0.15023176</td></tr><tr><td style="text-align:right;">1</td><td style="text-align:right;">0.19393130</td></tr><tr><td style="text-align:right;">2</td><td style="text-align:right;">0.90032058</td></tr></tbody></table></div></div></td></tr></table></div><p>}</p></div></div>


::: {.sourceClojure}
```clojure
[(random-vega-lite-plot 9)
 (tc/dataset {:x (range 3)
              :y (repeatedly 3 rand)})]
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>\[</p><div style="margin-left:10%;width:110%;"><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"values":[{"w":3,"z":1,"x":0,"y":-0.3351206989783658},{"w":6,"z":1,"x":1,"y":-0.3756886611692748},{"w":4,"z":6,"x":2,"y":-0.801673597328399},{"w":3,"z":8,"x":3,"y":-0.34877697273881425},{"w":5,"z":2,"x":4,"y":-0.005826200786612001},{"w":5,"z":1,"x":5,"y":0.4703810529564343},{"w":8,"z":5,"x":6,"y":-0.02485503067310746},{"w":4,"z":7,"x":7,"y":0.02900558934965025},{"w":5,"z":3,"x":8,"y":0.3395974797464295}]},"mark":"point","encoding":{"size":{"field":"w","type":"quantitative"},"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"},"fill":{"field":"z","type":"nominal"}}});</script></div></div><div><p>_unnamed \[3 2\]:</p><table class="table"><thead><tr><th style="text-align:right;">:x</th><th style="text-align:right;">:y</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">0.12965961</td></tr><tr><td style="text-align:right;">1</td><td style="text-align:right;">0.15892958</td></tr><tr><td style="text-align:right;">2</td><td style="text-align:right;">0.33414547</td></tr></tbody></table></div></div><p>\]</p></div></div>


## Delays
Clojure Delays are a common way to define computations that do not take place immediately. The computation takes place when dereferencing the value for the first time.
Clay makes sure to dererence Delays when passing values for visualization.
This is handy for slow example snippets and explorations, that one would typically not like to slow down the evaluation of the whole namespace, but would like to visualize them on demand and also include in them in the final document.


::: {.sourceClojure}
```clojure
(delay
  (Thread/sleep 500)
  (+ 1 2))
```
:::



::: {.printedClojure}
```clojure
3

```
:::



## Referring to files
In data visualizations, one can directly refrer to files places under `"notebooks/"` or `"src/"`.


::: {.sourceClojure}
```clojure
(kind/hiccup
 [:img {:src "notebooks/images/Clay.svg.png"}])
```
:::


<div style="max-height:600px;overflow-y:auto;"><img src="notebooks/images/Clay.svg.png" /></div>


::: {.sourceClojure}
```clojure
(kind/vega-lite
 {:data {:url "notebooks/datasets/iris.csv"},
  :mark "rule",
  :encoding {:opacity {:value 0.2}
             :size {:value 3}
             :x {:field "sepal_width", :type "quantitative"},
             :x2 {:field "sepal_length", :type "quantitative"},
             :y {:field "petal_width", :type "quantitative"},
             :y2 {:field "petal_length", :type "quantitative"},
             :color {:field "species", :type "nominal"}}
  :background "floralwhite"})
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"data":{"url":"notebooks\/datasets\/iris.csv"},"mark":"rule","encoding":{"opacity":{"value":0.2},"size":{"value":3},"x":{"field":"sepal_width","type":"quantitative"},"x2":{"field":"sepal_length","type":"quantitative"},"y":{"field":"petal_width","type":"quantitative"},"y2":{"field":"petal_length","type":"quantitative"},"color":{"field":"species","type":"nominal"}},"background":"floralwhite"});</script></div></div>


## Example projects using Clay
- [Tablecloth documentation](https://scicloj.github.io/tablecloth/)
- [Clay documentation](https://scicloj.github.io/clay/)
- [Kindly-noted](https://scicloj.github.io/kindly-noted/) - documenting the ecosystem around Kindly - WIP
- [Noj documentation](https://scicloj.github.io/noj/) - WIP
- [Clojure Tidy Tuesdays](https://kiramclean.github.io/clojure-tidy-tuesdays/) data-science explorations
- [Clojure Data Scrapbook](https://scicloj.github.io/clojure-data-scrapbook/)

<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: <a href="https://github.com/scicloj/clay/blob/main/notebooks/index.clj">notebooks/index.clj</a></small></small></pre></div>